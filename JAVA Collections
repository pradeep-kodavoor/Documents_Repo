Collection Interfaces
  - List
  - Set 
  - Queue
  - Map

List Interface
  - Cares about which position each object is in
  - Elements can be added in by specifying position - where should it be added in
  - If element is added without specifying position - it is added at the end
  - Allows duplicate elements
  - Index starts from 0
  
List.of - creates a immutable list - We cannot add more elements

List<String> list = List.of("Cat","Bat");
list.add("Dog") - Throws an exception, since list is immutable when created by List.of().

Vector
 - All methods are synchronized, Thread Safe
 - Basic Data Structure : Array
 - Constant access time
ArrayList
 - Not Synchronized, Not Thread Safe
 - Basic Data Structure : Array
 - Insertion and Deletion are slower compared to Linked List
 - Constant access time
Linked List
 - Basic Data Structure : Doubly Linked List
 - Iteration is slow, Access time is slow
 - Faster insertion and deletion

Few important methods of List implementation

add(element) -> Adds element to end of list
add(position, element) -> Adds element at specified position
addAll(Collection) -> Adds collection of elements to a list
set(position,newValue) -> Updates the value present at specified position
remove(position) -> Element at specified position is removed
remove(element) -> Specified element is removed

Note: while removing an Integer element from list, new Integer object has to be passed.

Ex: List<Integer> numbers = List.of(101,102,103,104);
List<Integer> numberList = new ArrayList<>(numbers);
numberList.remove(102) -> Throws ArrayIndexOutOfBoundException, since by default it is considered as index value.
numberList.remover(Integer.valueOf(102)) -> Correct way to remove an Integer object from the list.

For removing an element from the list Iterator has to be used.

Set Interface
  - Unique elements, Duplicates are not allowed
  - Positional access is not allowed, Adding or removing based on Index is not possible.
  
 
  

