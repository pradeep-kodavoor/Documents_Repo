Statefull Authentication
  - Browser sends a POST request, with username and password
  - User data would be stored at server side
  - Server responds with a cookie that includes session ID to identify the user
  - Cookie is set on the browser
  - On every request server validates the session ID to authenticate the request

Disadvantages
  - Hard to scale: The server needs to create a session for a user and persist it somewhere on the server. 
    If we have a distributed system, we have to make sure that session is shared between multiple nodes.

  - Cross-origin resource sharing (CORS): When using AJAX calls to fetch a resource from another domain (cross-origin) 
    we could run into problems with forbidden requests because, by default, HTTP requests don’t include cookies on cross-origin requests.

  - Coupling with the web framework: When using server-based authentication we are tied to our framework’s authentication scheme. 
    It is really hard, or even impossible, to share session data between different web frameworks written in different programming languages.
 
Stateless Authentication using JWT
  - Browser makes a request to the authentication server with user login information
  - Authentication server generates JWT token and sends it to client
  - Client stores the token sends it as part of every request as part of Authorization header
  - Server validates the token and returns secure resource to client
  
Advantages
  - Stateless, easier to scale: The token contains all the information to identify the user, eliminating the need for the session state.
    If we use a load balancer, we can pass the user to any server, instead of being bound to the same server we logged in on.

  - Reusability: We can have many separate servers, running on multiple platforms and domains, reusing the same token for 
    authenticating the user. It is easy to build an application that shares permissions with another application.

  - Performance: There is no server side lookup to find and deserialize the session on each request. The only thing we have to do is 
    validate the token and parse its content.
