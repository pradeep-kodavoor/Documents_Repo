Heap Memory - Will store the objects
Stack Memory - Will store the variables

Primitive variable - will have variable values
Reference variable - will have reference to the memory location

Comparison of reference variable compares its memory location not the values of instance variables.

String - Immutable
Once created, value cannot be changed in the memory location.

Variable Arguments. Takes any number inputs to a method. Introduced in JDK 5
Syntax : sum (int... marks) 
Sample method call: sum(2,3) sum(2,3,5)

Variable argument should always be last arugment inside a method.
Ex: sum(int length,int... num ) - Correct
Ex: sum(int... num, int length) - Wrong

Arrays:
int[] intArray = new int[5];
intArray = {1,2,3};
int[] newArray = {5,6,7}

Object Oriented Programming

Composition : Has-a relationship. Ex: Person has a Adress, Book has a Review, 
Inheritance : Is-a relationship. Ex: Student is a Person, Ferrari is a Car. 
Sub-class inherits all the state and behavior of the parent class.

Method Overriding - Overriding the implementation provided in the super class with new implementation.

super - Keyword to access state and behavior of parent class
this - keyword to access state and behavior of current class

MultiThreading

2 wasy of creating thread
 - Extend Thread class
 - Implement Runnable Interface and pass the object to Thread class constructor

Executor Service - For creating multiple threads in a simpler ways and manage the size of thread pool
execute() - For invoking a normal task

Callable Thread - task which returns some value
submit(Callable task) -> Executes single callable task
invokeAll(Collection of Callable tasks) -> Executes multiple callable task at a time

Exception Handling

Finally block - 
 - Executes even if exception is raised
 - Even if return statement is present
 - Will not be executed if lines inside finally throws exception
 - If JVM crashes (System.exit(0)) - DO NOT TRY

2 types of Exceptions
- Sub-classes of Runtime Exceptions
- Not a Sub-class of Runtime Exceptions (All classes that extends Exceptions and not Runtime Exceptions)

class Error extends Throwable

class Exception extends Throwable
class InterruptedException extends Exception 
 - Checked Exception 
 - Any class that extends Exception 
 - Should be handled always by throwing or surrounding by try/catch 

class RuntimeException extends Exception
class NullPointerException extends RuntimeException 
 - Un-Checked Exception 
 - Any class that extends Runtime Exception
 - Not mandatory of handling the exception
 
 Functional Programming
 
 Stream - source of objects 
 
 2 Operations on stream
  - Intermediate operation - 
    Input -> Stream
    Output -> Stream
    Ex: filter(), sorted(), distinct() 
    Stream can have multiple Intermediate Operations
    
  - Terminal operation 
    Input -> Stream  
    Single output 
    Ex: min(), max(), forEach(), reduce(), collect()
 

 
