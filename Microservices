Microservices - Small autonomous service that work together
Service exposed by REST. Small well chosen deployable unit,which can be cloud enabled
Why cloud enabled? - For creating multiple instances of a microservice, If a instance of microservice is down, other instance would come up
Small independent component which can be deployed on its own, without depending on other components

Spring Cloud - Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems.
Spring Cloud Config Server - Central place for providing al the configuration related data

Dynamic Scale Up and Down 
  Naming Server (Eureka)
    Service Registration - All instances of all microservices will register here
    Service Discovery - Service looks for current instance of any service, naming server will provide with service
  Ribbon - Load Balancer
    It will ensure load is distributed evenly
  Feign - For writing simple REST clients
  
Visibility and Monitoring
  Zipkin Distributed Tracing - To trace a request across multiple components.
  Netflix Zuul API Gateway - For implementing common features that are used across all microservices like logging.
  
Fault Tolerance
  Histrix - If any service is down it provides standard error page!
  
Independently deployable component - We should be able to take Individual Applications to LIVE without affecting other components
  
Challenges with Microservice Architectures
While developing a number of smaller components might look easy, there are a number of inherent complexities that are associated with microservices architectures.

Quick Setup needed : You cannot spend a month setting up each microservice. You should be able to create microservices quickly.
Automation : Because there are a number of smaller components instead of a monolith, you need to automate everything - Builds, Deployment, Monitoring etc.
Visibility : You now have a number of smaller components to deploy and maintain. Maybe 100 or maybe 1000 components. You should be able to monitor and identify problems automatically. You need great visibility around all the components.
Bounded Context : Deciding the boundaries of a microservice is not an easy task. Bounded Contexts from Domain Driven Design is a good starting point. Your understanding of the domain evolves over a period of time. You need to ensure that the microservice boundaries evolve.
Configuration Management : You need to maintain configurations for hundreds of components across environments. You would need a Configuration Management solution
Dynamic Scale Up and Scale Down : The advantages of microservices will only be realized if your applications can scaled up and down easily in the cloud.
Pack of Cards : If a microservice at the bottom of the call chain fails, it can have knock on effects on all other microservices. Microservices should be fault tolerant by Design.
Debugging : When there is a problem that needs investigation, you might need to look into multiple services across different components. Centralized Logging and Dashboards are essential to make it easy to debug problems.
Consistency : You cannot have a wide range of tools solving the same problem. While it is important to foster innovation, it is also important to have some decentralized governance around the languages, platforms, technology and tools used for implementing/deploying/monitoring microservices.
